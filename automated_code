# This python code integrates the object detection code and the gpio code to automate the object detection and 
# the motor used for propellers to navigate automatically without intervention.
import argparse
import sys
import time
import cv2
from tflite_support.task import core
from tflite_support.task import processor
from tflite_support.task import vision
import RPi.GPIO as GPIO
import utils

def setup_gpio():
    GPIO.setmode(GPIO.BCM)
    left_motor_pin = 17
    right_motor_pin = 18
    piker_pin1 = 23
    piker_pin2 = 24

    GPIO.setup(left_motor_pin, GPIO.OUT)
    GPIO.setup(right_motor_pin, GPIO.OUT)
    GPIO.setup(piker_pin1, GPIO.OUT)
    GPIO.setup(piker_pin2, GPIO.OUT)

    left_motor_pwm = GPIO.PWM(left_motor_pin, 100)
    right_motor_pwm = GPIO.PWM(right_motor_pin, 100)
    piker_pin1_pwm = GPIO.PWM(piker_pin1, 100)
    piker_pin2_pwm = GPIO.PWM(piker_pin2, 100)

    left_motor_pwm.start(0)
    right_motor_pwm.start(0)
    piker_pin1_pwm.start(0)
    piker_pin2_pwm.start(0)
    
    return left_motor_pwm, right_motor_pwm, piker_pin1_pwm, piker_pin2_pwm

def set_speed(left_motor_pwm, right_motor_pwm, left_speed, right_speed):
    left_motor_pwm.ChangeDutyCycle(left_speed)
    right_motor_pwm.ChangeDutyCycle(right_speed)

def move_piker(piker_pin1_pwm, piker_pin2_pwm, sss):
    piker_pin1_pwm.ChangeDutyCycle(sss)
    piker_pin2_pwm.ChangeDutyCycle(sss)

def stop_motors(left_motor_pwm, right_motor_pwm):
    set_speed(left_motor_pwm, right_motor_pwm, 0, 0)

def move_forward(left_motor_pwm, right_motor_pwm, speed):
    set_speed(left_motor_pwm, right_motor_pwm, speed, speed)
    print("Moving forward")

def move_backward(left_motor_pwm, right_motor_pwm, speed):
    set_speed(left_motor_pwm, right_motor_pwm, -speed, -speed)
    print("Moving backward")

def turn_left(left_motor_pwm, right_motor_pwm, speed):
    set_speed(left_motor_pwm, right_motor_pwm, -speed, speed)
    print("Turning left")

def turn_right(left_motor_pwm, right_motor_pwm, speed):
    set_speed(left_motor_pwm, right_motor_pwm, speed, -speed)
    print("Turning right")

def navigate_to_object(left_motor_pwm, right_motor_pwm, bbox, frame_width, speed):
    center_x = bbox.origin_x + bbox.width / 2
    if center_x < frame_width * 0.4:
        turn_left(left_motor_pwm, right_motor_pwm, speed)
    elif center_x > frame_width * 0.6:
        turn_right(left_motor_pwm, right_motor_pwm, speed)
    else:
        move_forward(left_motor_pwm, right_motor_pwm, speed)

def run(model: str, camera_id: int, width: int, height: int, num_threads: int, enable_edgetpu: bool) -> None:
    left_motor_pwm, right_motor_pwm, piker_pin1_pwm, piker_pin2_pwm = setup_gpio()
    speed = 60

    # Variables to calculate FPS
    counter, fps = 0, 0
    start_time = time.time()

    # Start capturing video input from the camera
    cap = cv2.VideoCapture(camera_id)
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, width)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, height)

    # Visualization parameters
    row_size = 26  # pixels
    left_margin = 30  # pixels
    text_color = (0, 0, 0)  # red
    font_size = 2
    font_thickness = 2
    fps_avg_frame_count = 10

    # Initialize the object detection model
    base_options = core.BaseOptions(file_name=model, use_coral=enable_edgetpu, num_threads=num_threads)
    detection_options = processor.DetectionOptions(max_results=3, score_threshold=0.3)
    options = vision.ObjectDetectorOptions(base_options=base_options, detection_options=detection_options)
    detector = vision.ObjectDetector.create_from_options(options)

    # Continuously capture images from the camera and run inference
    while cap.isOpened():
        success, image = cap.read()
        if not success:
            sys.exit('ERROR: Unable to read from webcam. Please verify your webcam settings.')

        counter += 1

        # Convert the image from BGR to RGB as required by the TFLite model.
        rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        # Create a TensorImage object from the RGB image.
        input_tensor = vision.TensorImage.create_from_array(rgb_image)

        # Run object detection estimation using the model.
        detection_result = detector.detect(input_tensor)

        # Draw keypoints and edges on input image
        image = utils.visualize(image, detection_result)

        # Navigate towards the detected object
        if detection_result.detections:
            bbox = detection_result.detections[0].bounding_box
            navigate_to_object(left_motor_pwm, right_motor_pwm, bbox, width, speed)
        else:
            stop_motors(left_motor_pwm, right_motor_pwm)

        # Print the coordinates of the detected objects
        for detection in detection_result.detections:
            bbox = detection.bounding_box
            print(f"Object detected: {detection.categories[0].category_name}")
            print(f"Bounding box coordinates: (x: {bbox.origin_x}, y: {bbox.origin_y}, width: {bbox.width}, height: {bbox.height})")

        # Calculate the FPS
        if counter % fps_avg_frame_count == 0:
            end_time = time.time()
            fps = fps_avg_frame_count / (end_time - start_time)
            start_time = time.time()

        # Show the FPS
        fps_text = 'FPS = {:.1f}'.format(fps)
        text_location = (left_margin, row_size)
        cv2.putText(image, fps_text, text_location, cv2.FONT_HERSHEY_PLAIN, font_size, text_color, font_thickness)

        # Stop the program if the ESC key is pressed.
        if cv2.waitKey(1) == 27:
            break
        cv2.imshow('object_detector', image)

    cap.release()
    cv2.destroyAllWindows()
    GPIO.cleanup()

def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--model', help='Path of the object detection model.', required=False, default='best1.tflite')
    parser.add_argument('--cameraId', help='Id of camera.', required=False, type=int, default=0)
    parser.add_argument('--frameWidth', help='Width of frame to capture from camera.', required=False, type=int, default=1280)
    parser.add_argument('--frameHeight', help='Height of frame to capture from camera.', required=False, type=int, default=720)
    parser.add_argument('--numThreads', help='Number of CPU threads to run the model.', required=False, type=int, default=4)
    parser.add_argument('--enableEdgeTPU', help='Whether to run the model on EdgeTPU.', action='store_true', required=False, default=False)
    args = parser.parse_args()

    run(args.model, int(args.cameraId), args.frameWidth, args.frameHeight, int(args.numThreads), bool(args.enableEdgeTPU))

if __name__ == '__main__':
    main()
